<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Read, Inspired and Write.]]></title><description><![CDATA[As long as we dare to dream and do not get in the way of ourseleves, anything is possible]]></description><link>https://techoi.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 18 Jul 2019 07:47:21 GMT</lastBuildDate><item><title><![CDATA[개발자로서의 행동강령 '소프트웨어 장인 - 산드로 만쿠스' 을 읽고]]></title><description><![CDATA[사람들은 무엇인가를 잘하고 싶어한다. 그 동기는 사람마다 다르겠지만 무언가에 통달한다는 일이 대단히 즐겁다는 것만은 같다.]]></description><link>https://techoi.github.io/posts/the-software-craftsman</link><guid isPermaLink="false">https://techoi.github.io/posts/the-software-craftsman</guid><pubDate>Wed, 17 Jul 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;더 나은 개발자가 되고 싶은 마음은 항상 가지고 있지만 그 마음을 지속적인 행동과 자극을 통해 유지해야 한다는 걸 알기에… 잡게 된 ‘소프트웨어 장인’이란 책을 읽고, 몇몇을 발췌해봤다.&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…(&lt;del&gt;톺아보기&lt;/del&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‘소프트웨어 장인’의 4장인 &lt;strong&gt;소프트웨어 장인의 태도&lt;/strong&gt;를 나열하면 다음과 같다. 내 커리어의 주인은 누구인가?(고용자 &amp;#x26; 피고용자의 관계) 끊임없는 자기계발(독서, 블로그, 기술 웹사이트), 팔로우할 리더 찾기(소셜미디어), 끊임없는 훈련(카타, 펫 프로젝트, 오픈 소스, 페어 프로그래밍), 사회 활동: 다른 개발자들과 어울리기(개별적으로 협력하는 것뿐만 아니라 프로페셔널 커뮤니티를 조성하는 것을), 의도한 발견, 일과 삶의 균형(시간만들기, 집중: 뽀모도로 기법, 균형). 많은 개발자들이 이미 행하고 있거나 들어봤거나 어찌보면 틀에 박힌 소리 같은 이 내용을 통해 지금의 개발자로서의 내 태도를 되돌아보게 했다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-07-17/software-craftsman.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이미지 출처: &lt;a href=&quot;http://www.yes24.com/Product/goods/20461940&quot;&gt;YES24&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;슈퍼 개발자, 실리콘밸리 테크 컴퍼니, 파급력 높은 서비스, 억대 연봉, 트렌디하고 핫한 기술을 익히고 이를 빠르게 적용하는 능력… 시선과 동기를 자극하는 매력적인 대상들에 시선이 사로잡히는 시대에 바라는 이상향과 사뭇 동떨어져있는 내 자신에 대한 고민을 하던 중 이 책은 소프트웨어를 만드는 장인의 태도에 대해 말한다. 아직 장인정신을 말하기에는 턱없이 부족하지만 더 나은 개발자가 되기 위해 허우적대는 내게는 &lt;strong&gt;다시 본질로(Ad Fontes)&lt;/strong&gt; 되돌아가야한다는 울림을 준다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;개발자로서의 기술&lt;/h4&gt;
&lt;p&gt;같은 코드를 반복해서 연습한 적이 언제였던가?
처음 코딩을 배울때는 이해안되는 코드를 반복해서 쳐보긴 했지만, 실무를 하면서는 같은 코드를 얼마나 반복해서 연습해봤을까 싶다.&lt;/p&gt;
&lt;p&gt;필수적이진 않겠지만, 코딩이 익숙해져야 한다는 말에는 동의한다. 대장장이는 자신의 도구들을 가지고 뭔가를 만드는 작업을 날마다 반복한다. 마부작침(磨斧作針) 같은 동작을 수천번 수만번 반복하면서 익숙하게 될때 비로소 그 안에서 효율성과 더 나음에 대해 고민하고 이를 구현해낼 수 있지 않을까?&lt;/p&gt;
&lt;p&gt;많은 기술자들은 자신의 기술을 갈고 닦기 위해 끊임없이 반복한다. 운동선수들도 항상 최고의 기량을 뿜어내기 위해 시합이 없는 날에도 끊임없이 기초체력을 올리고 팀워크를 맞춰보고 다양한 훈련들을 한다. 개발자로서 나는 어떠한 훈련을 하고 있는가?&lt;/p&gt;
&lt;h4&gt;소프트웨어 장인의 태도&lt;/h4&gt;
&lt;blockquote&gt;
&lt;h4&gt;‘오래 전에 작성했던 코드를 지금에 와서도 고칠 부분이 없어 보인다면, 그것은 그동안 배운 것이 없다는 뜻이다.’(77page)&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;비슷한 시기에 같은 회사에 입사한 동료와 저자의 이야기로 시작되는 chaper 4는 1년후 두 사람의 상황에 180도로 달라졌던 이유를 태도에서 찾는다(등골이 오싹했다). 커리어를 주도적으로 이끄는 방법과 어떻게 시대의 흐름에 뒤떨어지지 않을지에 대한 방법은 모두 소프트웨어 장인의 태도를 가졌냐 그렇지 못하냐의 문제라는 말이다.&lt;/p&gt;
&lt;h5&gt;내 커리어의 주인은 누구인가?&lt;/h5&gt;
&lt;p&gt;회사에 고용되어 일하는 프로그래머는 두가지 길로 나뉘어 걷는다.&lt;/p&gt;
&lt;p&gt;공장노동자 vs 소프트웨어 프로페셔널
회사에서 제공하는 훈련에만 의존해서 일하는 공장 노동자와 달리 자신의 시간과 돈을 투자해서 주도적으로 고객에게 좋은 서비스, 최선의 방법으로 문제를 해결해줌으로서 성장하는 소프트웨어 프로페셔널.&lt;/p&gt;
&lt;p&gt;시키는 대로만 일하고 퇴근 시간만 기다리는 개발자는 프로페셔널 개발자가 아니다. 이는 공장 노동자와 다를바 없다. 프로페셔널은 자신이 개발하는 소프트웨어의 기술, 품질, 구현에 최상의 서비스를 제공하는데 집중한다.&lt;/p&gt;
&lt;h5&gt;끊임없는 자기계발&lt;/h5&gt;
&lt;p&gt;자기계발을 할 수 있는 방법 몇가지&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;독서(특정 기술에 대한 서적, 특정 개념에 대한 서적, 행동약식에 대한 서적, 혁명적 서적 혹은 고전)&lt;/li&gt;
&lt;li&gt;블로그(기술의 간접경험, 트렌드에 대한 발견)&lt;/li&gt;
&lt;li&gt;기술 웹사이트(최신 동향)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;팔로우할 리더 찾기&lt;/h5&gt;
&lt;p&gt;해당 기술이나 해당 행동양식의 리더를 찾고 그의 책, 강의, 블로그를 팔로우하라.&lt;/p&gt;
&lt;h5&gt;끊임없는 훈련&lt;/h5&gt;
&lt;p&gt;운전을 처음할때와 비교하면 운전에 능숙해져 갈수록 주변에 세세한 주의를 기울이면서도 자연스러운 운전이 가능해지듯 작성 가능한 최선의 코드를 만드는데 집중해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;카타(품세): 공연전 몇 날, 몇 달을 반복 훈련하는 음악가를 상상하면서 같은 코딩 카타를 반복하더라도 매번 다른 테크닉, 다른 언어, 다른 기술, 다른 접근 방법을 사용해 효과를 높인다.(codingkata.org, codekata.pragprog.com, kate.softwarecraftsmanship.org)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펫 프로젝트: 취미로서의 프로젝트, 예산, 일정, 수익창출의 제약에서 벗어나 행하는 프로젝트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오픈소스: 배우고 싶은 내용과 연관된 소스 코드를 받아, 실행해보고, 테스트 코드 읽어보고, 디버깅해보고, 이용해보고, 작은 거라도 고쳐서 PR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;페어 프로그래밍: 낯선이와의 페어 프로그래밍&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;사회 활동: 다른 개발자들과 어울리기&lt;/h5&gt;
&lt;p&gt;지역 사용자 그룹이나 기술 커뮤니티에 가입하고 행사들에 참여하면서 인적 네트워크를 만들고 배우고 공유하는 이들과 어울리기&lt;/p&gt;
&lt;h5&gt;의도한 발견&lt;/h5&gt;
&lt;p&gt;자신이 모르는 것을 모른다고 받아들이는 것이 필요하다. 모르고 있다는 것을 인지하지 못한 상태는 문제다. 무지는 상숫값이다. 다양한 활동으로 무지의 수준을 최대한 빨리 낮출수록 업무 생산성과 효율이 높아진다. 모르는 것을 배우는 기회를 만들기 위해 노력해야 한다.&lt;/p&gt;
&lt;h5&gt;일과 삶의 균형&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;시간 만들기: 가족과의 시간을 유지하면서 뭔가 해볼 시간을 만들기 위해서는 잠이든 게으름을 포기해야한다.&lt;/li&gt;
&lt;li&gt;집중: 뽀모도로 기법&lt;/li&gt;
&lt;li&gt;균형: 페이스를 유지하는 것이 중요하다. 프로페셔널로서의 삶이 건강해야 가족의 삶도 건강해진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;결론(Conclusion)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;h4&gt;‘시간이 없다는 말은 더 이상 변명이 될 수 없다. 우리는 항상 시간이 있다. 우리에게는 모두 정확히 같은 만큼의 시간이 주어진다. 차이점은 우리가 그 시간을 어떻게 쓰느냐일 뿐이다.’(103page)&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;어느새 2019년이 이제 절반이 지났다. 남은 2019년에는 좀 더 프로페셔널한 개발자로 걸어보자.&lt;/p&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;좋은 코드는 고민하는 사람에게서 나온다. 태생적으로 코드를 잘 짜는 사람이 있을지도 모르겠다. 하지만 태생적으로 코드를 못 짤 수 밖에 없는 사람은 없지 않을까? &lt;del&gt;그런 사람이라면 이미 프로그래머로서의 삶에서 두손 두발 다들고 멀어져갔을지도 모를..&lt;/del&gt; 슬럼프에 빠질때마다 한번씩 보면 좋을 것 같은 자극제&lt;/h5&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[알고리즘에 대한 이야기(문자열 비교 알고리즘 관련)]]></title><description><![CDATA[알고리즘 연습이란 미명하에 주말 순삭의 주범 문자열 비교 알고리즘]]></description><link>https://techoi.github.io/posts/word-comparison-algorithm</link><guid isPermaLink="false">https://techoi.github.io/posts/word-comparison-algorithm</guid><pubDate>Sun, 07 Jul 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;회사 일을 하면서는 알고리즘에 대해 그리 고민을 많이 안하게 되는 듯.. 그래서 찾아서 해야하는 알고리즘 공부&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…(&lt;del&gt;톺아보기&lt;/del&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;주변의 많은 이들이 이직시장에 나가서 고군분투하는 모습을 보면서 알고리즘의 중요성(?) 아니 알고리즘과 너무 멀리 떨어져있는 내 자신을 발견함. 이런 걱정을 해소하기 위한 작은 움직임으로 주변 사람들이 보는 코딩 테스트 문제를 가지고 알고리즘 고민을 시작함. 그 과정에서 고민하게 된 문자열 알고리즘에 대한 고민과 나름의 해결과 잡다부리 한 생각을 정리한 글&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-07-07/algorithm.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이미지 출처: 인프런&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그래밍과 알고리즘을 뗄레야 뗄 수 없는 관계다. 사실 이름만 거창하지 사실상 모든 코드가 어떤 문제를 해결하려는 목적을 가지고 설계된 ‘알고리즘’ 이라 생각 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;현실(AS-IS)&lt;/h4&gt;
&lt;p&gt;프로그래밍을 처음 배우던 시절에는 취직을 위해 필수라고 생각해서 알고리즘 스터디를 했었다. 그때는 &lt;a href=&quot;&amp;#x27;https://www.acmicpc.net/&amp;#x27;&quot;&gt;백준 알고리즘&lt;/a&gt;에서 문제를 보고 여러명이서 정해진 시간동안 푸는 식으로 스터디를 진행했었다. 자바를 갓 배운 입장에서 사실상 알고리즘을 제대로 공부했다기 보다는 스터디원 중 빼어난 1인의 하드캐리를 지켜보며 알고리즘에 ㅇ정도 느꼈던 거 같다. &lt;del&gt;강남에만 스터디가 즐비한 것에 갑갑함을 느끼고 OKKY에 직접 ‘강서구 알고리즘 스터디’ 모집 글을 올리고 6명으로 구성된 알고리즘 스터디를 구성했었던 혈기 왕성하던 시절이 그립…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;취직을 한 이후에도 알고리즘에 대한 막연한 동경에 사로잡혀 종만북이나, 기타 도서관에 있는 알고리즘에 대한 책들을 빌려봤지만, 사실 읽을때는 그런줄 알지만(못이해하겠는 것도 많았고) 실제로 일을 하면서 알고리즘을 적용할 일은 그리 많지 않았다. &lt;del&gt;머신러닝을 통한 기능이 필요했던 이미지분석을 위해 opencv로 이미지가공하고 tensorflow를 경험해봤지만 이는 알고리즘을 짠다기 보다는 대량의 데이터를 통해서 결과를 예측하는 수준이었…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;코드를 효율적으로 짜는데 집중하는 정도에서 타협했고, 프론트엔드에 집중하게 되면서 점점 알고리즘에 대한 갈증을 잃어가고 있었다. 클라이언트단에서 부하를 많이 견디는 코드는 최대한 지양하자는 1차원적인 생각에… 요즘 핫한 기술들을 경험하고 싶다는 생각에 알고리즘에 대한 고민을 등한시 했었다.&lt;/p&gt;
&lt;p&gt;하지만, 최근 감사하게도 주변 지인들의 이직 준비와 이직 소식을 들으면서 알고리즘에 대해 다시 한번 생각해볼 수 있는 기회가 생겼다.&lt;/p&gt;
&lt;h4&gt;주말(Weekend)&lt;/h4&gt;
&lt;p&gt;코딩 테스트 문제를 받았고, 한번 훑어보니 음… 이거 이러저러케 하면 되겠는데? 하는 가닥이 보였고, 잠깐 짬을 내서 한번 풀어나 보자 싶었다.&lt;/p&gt;
&lt;p&gt;그렇게 금요일 밤에 나혼자 산다를 보는 와이프 옆에서 맥북으로 놀이를 시작했다. &lt;del&gt;나는 그러지 말았어야 했나?&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;대충 코드를 짰고, 이를 가지고 원하는 결과를 받았다. 하지만 너무 Brute Force Algorithm이었다.(진짜 과제는 처리해야하는 데이터 양이 많아서 Brute Force 방식으로는 효율성이 극심히 떨어지는 문제가 있었다.)&lt;/p&gt;
&lt;p&gt;그래서 이것 저것 알고리즘들을 검색해보고 적용할 수 있는 것들을 읽어보고 이해해보고 적용해보고 하다보니 새벽 3시가 됬다.&lt;/p&gt;
&lt;p&gt;찝찝했지만, 그렇게 침대에 누워서 계속 더 나은 답을 찾다가 토요일에 일어나자마자 하다가 아들래미랑 놀다가 다시 생각나면 잠깐 종이에 끄적여보고,&lt;/p&gt;
&lt;p&gt;밥먹다가 또 끄적여보고 도서관가서 책빌릴때도 괜히 수학적 사고에 대한 분야에서 이것저것 살피다가,&lt;/p&gt;
&lt;p&gt;주일이 되었고 교회 갔다가 아버지 생신파티하고 집에 돌아가서 생각해본 걸 이것저것 해봤고 그렇게 주말을 떠나 보냈다. &lt;del&gt;주말이 내게로 들어온건가?&lt;/del&gt;&lt;/p&gt;
&lt;h4&gt;결론(Conclusion)&lt;/h4&gt;
&lt;p&gt;결론은 좋았다. 오랜만에 뭔가의 해결책을 오래도록 끈덕지게 고민해볼 수 있었다. 이런 일이 많으면 좋겠다. &lt;del&gt;이글은 그렇게 성지글이 되는데..는 아니길&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;사실 알고리즘에 대해 조금이라도 고민을 해본 사람에게는 크게 어렵지 않은 문제일수도 있지만 어떻게 하면 이를 더 효율적으로 해소할 수 있을까에 대해 계속 고민하는 건 좋은 거 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;누군가 말했다. ‘프로그래밍에는 모두가 동의하는 최적의 답이 반드시 존재한다고’&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;특정 회사의 코딩 테스트 문제이기 때문에 뭐 함부로 유출할 수는 없지만 대략의 내용은 다음과 같다. &lt;/p&gt;
&lt;p&gt;읽는 여러분도 고민해 보시길..?&lt;/p&gt;
&lt;h4&gt;문제&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;랜덤으로 생성되는 임의의 문자 생성기가 있다.&lt;/li&gt;
&lt;li&gt;그 문자 생성기에서 생성된 1만개의 문자를 유사성을 기준으로 가장 유사한 문자쌍의 목록을 보여줘라.&lt;/li&gt;
&lt;li&gt;필터를 추가해서 특정 문자를 선택하면 해당 문자를 포함한 문자한 가장 유사항 문자쌍의 목록을 보여줘라.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;문제를 좀더 간단하게 하기 위해서는 문자의 종류와 중복가능성, 갯수 등을 조절하면 난이도는 확 줄어들 수 있겠다.&lt;/p&gt;
&lt;p&gt;일반적인 문자열 비교 알고리즘은 다양하겠지만 가장 유명한건  Edit Distance라고도 불리는 ‘Levenshtein distance’ 알고리즘이다.&lt;/p&gt;
&lt;p&gt;간단히 개념만 설명하면,&lt;/p&gt;
&lt;p&gt;A라는 문자묶음과 B라는 문자묶음를 비교하면서 가장 조금 편집해서 서로를 동일하게 만들 수 있는 점수(최소 편집 거리)를 구하는 방식이다.&lt;/p&gt;
&lt;p&gt;편집이란 개념은 우리 모두 알듯이 추가(Add), 편집(Edit), 삭제(Delete)하는 방식을 모두 포함한다.&lt;/p&gt;
&lt;p&gt;고민해보시길~ 알고리즘만 찾아보고 이를 가지고 직접 이것저것 시도하면서 즐거움을 누려보시길(&lt;del&gt;나처럼 주말을 날리시길&lt;/del&gt;)&lt;/p&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;나는 저 편집 거리 알고리즘을 사용하지 않았다. 문제에 걸맞는 접근이 아니었기에… 그래서 직접 알고리즘을 고민해서 만들었다. 사실 알고리즘을 만들었다고 하기도 뭐하지만, 비교의 과정에서 발생하는 정보들을 재활용할 수 있는 방법을 계속 고민했고, 그 과정을 최소화할 수 있도록 했다. 1만개 데이터를 상호 비교하고 이를 유의미한 결과로 내는데 길게는 80초에서 짧게는 20초정도 걸렸다. js 기준… 해당 과제는 프론트엔드에서 이를 구현하는 과제였기에 나는 프론트엔드에서 작업한 코드도 작성하다가 분석만 담당하는 Express 서버를 하나 띄워두고 일을 전달하고 작업을 하도록 했다. 프론트엔드의 기술력 + 알고리즘적 문제해결 능력에 대해 묻는 질문이지 않았나 싶다.&lt;/h5&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[iOS 고유 클릭 이벤트 이슈 해소]]></title><description><![CDATA[div에 클릭 이벤트를 걸었는데 제대로 동작하지 않는 경우...]]></description><link>https://techoi.github.io/posts/ios-click-event-issue</link><guid isPermaLink="false">https://techoi.github.io/posts/ios-click-event-issue</guid><pubDate>Thu, 04 Jul 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;iPhone에서만 안되는 click event 버그 대응..&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…(&lt;del&gt;톺아보기&lt;/del&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iOS만의 이슈로 iPhone이나 iPad의 경우, a 태그나 input 태그가 아닌 경우 클릭 이벤트 리스너를 붙여놔도 제대로 동작하지 않는 경우가 있다. 이때는 click 이벤트 리스너를 붙인 태그에 스타일로 cursor: pointer;를 넣어주면 해소된다. 이유는 iOS가 dom이 로딩된 후 클릭 이벤트 리스너가 추가된 dom을 클릭해도 클릭 이벤트를 fire 시켜주지 않기 때문이다.(mouseover, touchstart 등은 정상작동) 스타일로 curosr: pointer를 추가해주면 iOS가 해당 dom이 클릭 대상이라고 인지하고 클릭시 클릭 이벤트를 fire 시켜주게 되어 문제가 해소된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-07-05/ios-logo.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;그동안 아주 오랜 시간동안 안드로이드 폰을 사용하고 있었다. 최근에 아이폰 XR로 폰을 바꿨다. &lt;del&gt;카드를 만들고 기기값을 감면받아놓고 공짜폰이라고 좋아한 호구인건 비밀&lt;/del&gt; 아이폰 유저가 되니깐 갑자기 애플 덕후가 된 거 같은 기분이… 애플짱! 각설하고 아이폰으로 바꾼 겸사겸사 iOS 이슈 대응 로그를 남긴다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;이슈 현상 리포트&lt;/h4&gt;
&lt;p&gt;특정 아이콘의 클릭 이벤트가 아이폰에서만 정상적으로 작동하지 않는 문제 발생&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아이폰에서는 safari, chrome, firefox 모든 브라우저에서 동작하지 않음 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;안드로이드 폰에서는 samsung browser까지 정상 동작 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;맥북에서 safari로 확인할 경우 정상 동작 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;맥북에서 chrome 개발자 환경 mobile로 설정 한 경우 정상 동작 확인&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;iOS 고유 버그로 확인&lt;/h4&gt;
&lt;p&gt;2010년도의 자료에서도 확인할 수 있는 버그(이정도 되면 애플에서는 의도적으로 이 버그를 유지하고 있다고 볼 수 있음)&lt;/p&gt;
&lt;p&gt;해당 이슈는 레거시 코드에서 발생한 이슈로 코드 히스토리를 봤을 때 거의 처음부터 제대로 동작하지 않았음을 알 수 있었다.&lt;/p&gt;
&lt;p&gt;(QA를 아무리 열심히 하더라도 전혀 예측하지 못하는 버그에는 대응하기가 쉽지 않음을 다시 한번 깨닫…)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html&quot;&gt;2010년 iPhone click event delegation에 대한 글&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위 글의 내용을 정리하면 다음과 같다.(&lt;del&gt;영어니깐..&lt;/del&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이벤트 버블링에 대한 개론&lt;/li&gt;
&lt;li&gt;아이폰에서는 click event 관련 버그가 있음&lt;/li&gt;
&lt;li&gt;애플에서 아마도 의도적으로 이를 무시하도록 해놓은 것 같음&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일반적인 웹브라우저는 html 태그 엘리먼트들을 그리고 이를 DOM에 연결해두지,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;그렇다면 이벤트는 어떻게 인지할까?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;특정 엘리먼트를 사용자가 클릭했을때 해당 DOM은 자신이 클릭 되었음을 알리는 방법으로 Click Event를 Fire 시킬 것이다.&lt;/p&gt;
&lt;p&gt;이벤트 전파방식(Event porpagation)을 정해둔대로(버블링 혹은 캡처링) 이벤트는 전달될 것이고,
해당 이벤트를 전달받는 DOM 중에 클릭 이벤트 리스너가 붙어있는 녀석이 있다면 해당 리스너의 콜백 함수가 실행될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-07-05/apple-developer-logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그럼 애플의 개발자들은 왜 click event만 특수하게 다뤘을까…?(어디까지나 나의 추측임)&lt;/p&gt;
&lt;p&gt;DOM을 관리해야하는 브라우저 입장에서는 &lt;strong&gt;&lt;em&gt;어떤 DOM이 클릭 될지도 모른다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;사용자는 뭐든 클릭해댈 가능성과 자유가 있고, 특히 모바일에서는 스크롤이든 확대든 휴대폰을 잡는 등 거의 모든 동작이 Click Event를 Fire 시키게 될 가능성이 있다.&lt;/p&gt;
&lt;p&gt;모든 엘리멘트들이 수많은 가능성에서 클릭 될 것이고 그때마다 Click Event를 Fire 시키는 건 상당히 많은 리소스를 소비하게 될 가능성이 있다.&lt;/p&gt;
&lt;p&gt;iOS 개발자들은 아마도 &lt;strong&gt;의도적으로&lt;/strong&gt; Click Event만 특별히 다루는 것 같다.&lt;/p&gt;
&lt;h4&gt;iOS 개발자들이 선택한 방식&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;단순히 클릭되었다는 사실만 가지고는 Click Event를 Fire 시키지 않는다.(리소스 개이득)&lt;/li&gt;
&lt;li&gt;단, 엘리먼트가 의도적으로 클릭 됨직하다고 판단 될 경우에만 클릭시 Click Event를 Fire 시킨다.(클릭 됨직한 건 iOS가 정한듯…)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;결과적으로 해당 이슈를 해소하기 위해서는 iOS가 클릭 됨직한 엘리먼트로 판단하는 기준에 맞춰서 코드를 수정해주면 된다.&lt;/p&gt;
&lt;h4&gt;버그 픽스 방법&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;a 태그나 input 태그로 만든다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;javscript:alret(&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;wow&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;);&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Press&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;태그에 style로 cursor를 포인터로 설정해둔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.clickable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token property&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pointer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;엘리먼트 자체에 Click Event Listener를 inline으로 붙인다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;location.href=&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;www.naver.com&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Go to Naver&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;이번에 겪은 이슈는 레거시의 특정 아이콘에서만 클릭이 안되는 이슈였음&lt;/h4&gt;
&lt;p&gt;PC웹에서는 자연스레 &lt;code class=&quot;language-text&quot;&gt;cursor:pointer;&lt;/code&gt;를 붙이고 있었고, 그 코드를 복사해서 만든 모바일웹 아이콘은 정상적으로 동작했지만, 새로 만든 icon의 스타일에는 해당 스타일이 빠져있었던 이슈라 2번 방식으로 간단히 해소했다.&lt;/p&gt;
&lt;p&gt;반응형웹이라면 default로 cursor:pointer; 설정해주고,
리액트에서는 onClick이 붙어있는 컴포넌트에는 clickable 클래스를 붙여주자.&lt;/p&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;조금만 검색하면 바로 해결책을 찾을 수 있는 문제였지만 단순히 해결책을 복붙만 하고 싶지 않았다. 아이폰 유저가 된 겸사겸사 iOS 개발자는 왜 이런식으로 구현을 했을까에 대해 고민해보고 싶었다. 시간이 지날수록 더 많이 고민하고 더 많이 생각하고 더 많은 부분을 고려하고 코드를 작성하고 싶다. 그런 개발자가 되고 싶다. 시간적인 여유가 없더라도 이렇게 하고 싶다. 여러가지 이슈들이 치고 들어오지만 어차피 해야하는 일이라면 좀 더 재미있는 방법으로 고민하고 찾아보고 그리고 또 로그를 남기며 일해야집! 회사에 프론트엔드 개발자라고는 혼자밖에 없어서 외롭지만… 같이 고민을 할 수 있는 동료가 있으면 좋겠습니다. &lt;a href=&quot;https://www.wanted.co.kr/wd/23772&quot;&gt;와그 프론트엔드 개발자 채용공고&lt;/a&gt;&lt;/h5&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[[심심풀이] 크롤링 라이브러리 Cheerio 가지고 놀기]]></title><description><![CDATA[그동안 못본 웹툰 몰아보다 시작한 크롤링 스크래핑 하면서 놀기]]></description><link>https://techoi.github.io/posts/just-for-fun-cheerio-crawler</link><guid isPermaLink="false">https://techoi.github.io/posts/just-for-fun-cheerio-crawler</guid><pubDate>Sun, 30 Jun 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;주말에 그동안 못본 웹툰 정주행하다가 시작한 크롤링 스크래핑 하면서 놀기…&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자바의 Jsoup, 파이썬의 Beautiful Soup으로 하던 스크래핑을 자바스크립트로 하는 건데, Cheerio라는 라이브러리를 가지고 놀아보는 뭐 그런 글이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-30/naver-webtoon-logo.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;네XX 요일 웹툰을 거의 다 챙겨보던 때가 있었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;특정 요일에는 챙겨보던 웹툰이 1~9위를 다 하고 있었던 시기도 있었다.
어렸을때부터 만화를 좋아했었는데, 웹툰 퀄리티가 말도 안되게 솟구치면서 많은 사람들이 &lt;del&gt;쿠키를 구워가며&lt;/del&gt; 웹툰을 즐기고 있다.&lt;/p&gt;
&lt;p&gt;가끔 정신없이 바쁜 기간에는 웹툰을 못보고 몰아보기를 하게 되는데, 그럴때 다X웹툰의 정주행 기능이 네XX웹툰에도 있으면 좋겠다라는 생각은 했었는데…&lt;/p&gt;
&lt;p&gt;주말에 못본 웹툰이나 볼까하다가 귀찮아서, 정주행 기능이나 만들어볼까 하다가 웹툰 소장툴을 만들어 봤다.&lt;/p&gt;
&lt;p&gt;(은행사, 카드사, 배달앱 3사 스크래핑 모듈을 만들어대던 시기에는 생각의 흐름대로 술술했던 스크래핑 기술을 되새겨 볼 겸사겸사 오랜만에 스크래핑 모듈이나 만들어보자 하고 움직였는데, 이미지 링크 모아서 한번에 다운받는 뭐 그런 간단한 기능이지만, Referer 설정만 해주면 별 문제 없이 잘 해소됬다. 너무 쉽게 끝나버려서 Cheer.io 사용법이나 간단하게 설명하는데 그칠 듯하다.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;웹툰의 저작권은 작가분들께 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지적 재산에 대한 존중이 개발자로서의 기본 소양이 아닐까 싶다!&lt;/p&gt;
&lt;h4&gt;네XX 웹툰 소장툴 기본 프로세스&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;네XX 웹툰 검색에서 원하는 웹툰을 검색한다.&lt;/li&gt;
&lt;li&gt;해당 웹툰이 존재 한다면, 최신 회차의 번호를 확인한다.&lt;/li&gt;
&lt;li&gt;첫회부터 마지막 회차까지 모든 페이지에 들어가서 웹툰 이미지를 다운로드 한다.(회차별로 파일 순서대로)&lt;/li&gt;
&lt;li&gt;(불필요) 네XX 웹툰은 이미지를 임의로 잘라놓았으니 그 이미지들을 모아서 하나의 긴 이미지로 만들어준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;스크래핑 툴&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Fiddler mac인 경우, Charles&lt;/li&gt;
&lt;li&gt;Wire Shark&lt;/li&gt;
&lt;li&gt;그리고 Chrome or Firefox&lt;/li&gt;
&lt;li&gt;추가로 Postman&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;일반적인 스크래핑 방식에 대해 간단하게 설명하면,&lt;/h4&gt;
&lt;p&gt;내가 이해하는 웹 스크래핑(크롤링은 스크래핑의 한 방식) 웹 상의 정보를 수집해서 원하는 형태로 가공하는 것이다.
이를 사람이 하는게 아니라 bot / module을 써서 하도록 하는 것이기에, 웹 브라우징을 하는 과정을 코드로 작업해주면 된다.&lt;/p&gt;
&lt;p&gt;누구든 접속해서 정보를 열람할 수 있는 웹사이트라 하더라도 마구잡이로 접속이 가능하지 않을 수 있다.
만약 로그인을 통해서 접속해야만 하는 사이트라면 로그인을 하는 기능을 구현해줘야할 것이고,
특정 ip만 접속을 허용한다면 특정 ip에서 왔다라는 표식을 넣어주면 될 것이다.&lt;/p&gt;
&lt;p&gt;즉, 정보를 수집하고 싶은 타겟 페이지의 구조를 파악하고 거기에서 필요한 정보들만 수집해내서 원하는 형태로 가공하면 됨
여기서는 네XX웹툰의 검색페이지, 목록페이지, 회차별 페이지가 타켓이고 각 페이지마다 원하는 정보는 다음과 같다.&lt;/p&gt;
&lt;p&gt;검색 페이지 : 검색어에 해당하는 웹툰 목록 페이지 링크
목록 페이지 : 최신 회차 정보 및 웹툰 회차 페이지 링크
회차별 페이지 : 웹툰 이미지 링크&lt;/p&gt;
&lt;p&gt;일단 브라우저로 한번 둘러보시라~&lt;/p&gt;
&lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/techoi/n-webtoon-scraping&quot;&gt;github&lt;/a&gt;에서 확인 가능하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;검색어로 조회&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// node index.js 신의탑 식으로 arg로 검색어를 입력하도록 함&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; webtoonName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검색결과의 첫번째 a 태그의 href 추출&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; webtoonHref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#content &gt; div:nth-child(2) &gt; ul &gt; li:nth-child(1) &gt; h5 &gt; a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;href&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; webtoonUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; naverWebtoonDomain &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; webtoonHref&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 추출한 url로 접속해서 최신 회차의 페이지 번호 및 회차별 페이지 url 추출&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lastNoUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#content &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; td.title &gt; a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;href&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lastNo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lastNoUrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;no=&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/[^0-9]/g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;1회부터 최신 회차 페이지 각각 들어가서 웹툰 이미지 저장(동시 접속해서 이미지들을 긁으면 이미지 서버가 막으므로 동기로 요청)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  webtoonUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webtoonUrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;list.nhn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;detail.nhn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;lastNo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveImagesByChapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;webtoonUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`chapter: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; Done`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;
&lt;p&gt;주석처리된 부분을 보면 회차의 이미지를 배열로 받아서 세로로 머지하는 기능이 있는데, 파일 용량만 커지고 별로인듯, 차라리 웹툰을 읽을 수 있는 페이지를 따로 만들어서 정주행 기능을 만들어주는게 훨씬 나을듯&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; images &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mergeImg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;images&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; direction&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1.jpg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;done&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;또 욕구뿜뿜이 일어나면 다른 웹툰들도 스크래핑 모듈을 만들어보고 정리해 올려봐야겠다.&lt;/h4&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[리액트 다중언어 제공 라이브러리 react-intl 적용]]></title><description><![CDATA[po, mo 파일들과 헤어지는 가장 쿨한 방법]]></description><link>https://techoi.github.io/posts/react-intl</link><guid isPermaLink="false">https://techoi.github.io/posts/react-intl</guid><pubDate>Fri, 28 Jun 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;React를 사용한다면 po, mo 파일들과의 결별을 선언하고 새로운 인연을 찾자..&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;리액트로 새로운 프로젝트를 구성한다면, 다중언어를 제공하기 위해 일반적으로 사용하는 po, mo 파일들을 관리하지 않아도된다. json형태로 언어별 번역 문구를 관리할 수 있는 react-intl를 적용하면, 그간 번역 파일 관리하면서 아팠던 두통을 훌훌 털어버릴 수 있다. Server Side Render(SSR) 프레임워크인 Next.js에서 적용한 사례를 통해 react-intl의 장점만 알아보자 &lt;del&gt;단점도 있겠지만 레거시의 php에서 번역파일 수정하고 apache reload 하던 것과 비교할소냐…&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-28/react-intl-comparision.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여러 Alternatives 중에 월등한 사용률과 안정성도 어느정도 인정받은 모듈이라 볼 수 있음&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;npm 모듈을 정할때는 일단 사용자 수, 깃이라면 이슈관리, 의존성 등을 확인하고 현재 사용하고 있는 구조에 적절하게 묻어날 수 있으면 붙이는 식으로 결정하곤 한다.&lt;/p&gt;
&lt;p&gt;주어진 상황마다 조금씩 설정 방식이 다르겠지만,
일반적인 리액트 환경이라면 &lt;a href=&quot;https://gracefullight.dev/2018/01/15/react-intl%EB%A1%9C-%EB%B2%88%EC%97%AD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-react-i18n/&quot;&gt;react-intl로 번역 적용하기&lt;/a&gt; 링크를 참조하면 좋을 듯&lt;/p&gt;
&lt;p&gt;위 블로그에서는&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;react-intl 설치&lt;/li&gt;
&lt;li&gt;번역 데이터 생성&lt;/li&gt;
&lt;li&gt;연동&lt;/li&gt;
&lt;li&gt;사용&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;순으로 설명을 잘해놨지만&lt;/p&gt;
&lt;p&gt;Next.js 에서의 설정 방식과 좀 더 나은 번역데이터 활용을 위한 몇가지 팁을 덧붙이자면 다음과 같다.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h4&gt;Next.js React-intl 적용하기&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Next.js 프로젝트 생성(이미 되있다고 가정)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/soulmachine/nextjs-starter-kit#step4-react-intl&quot;&gt;Next.js react-intl 세팅&lt;/a&gt; 따라하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패키지 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; react-intl intl accepts glob&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;server.js&lt;/code&gt; 에 accept Language에 따라서 번역파일 읽도록 설정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;_document.js&lt;/code&gt; 에 모든 페이지에 localeDataScript 주입해주도록 설정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HOC 만들기 IntlProvider로 component 감싸기(Hooks를 이용해서 HOC를 대체할 수도 있음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 사용 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./lang 폴더에 en.json, ko.json, ja.json 등 accept Language에 맞춰 번역 파일들을 넣어둔다. &lt;/li&gt;
&lt;li&gt;각 컴포넌트를 Hoc로 감싸서 export 해주면 사용이 가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An example app integrating React Intl with Next.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Component 자체로 번역 문구를 사용하고 싶을때: FormattedMessage 컴포넌트에 id를 주면 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FormattedMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-intl&apos;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FormattedMessage&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;greeting&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 아니라 그냥 문구만 사용하고 싶을때: props로 intl 객체를 받아서 사용하면 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; injectIntl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-intl&apos;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JoinForm&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; intl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt;
            &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;greeting&apos;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;injectIntl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;JoinForm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;꿀팁(번역파일 관리와 id를 통한 호출을 직관적으로 바꾸기)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AS-IS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;en.json&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Techoi&apos;s Blog&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Read, Inspired and Write.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Technology, Blog, ...&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;번역문구는 페이지별로 각각 다르기 마련이고, 그렇게 되면 id를 특정하는데 굉장히 피곤해진다. 번역 파일을 정갈하게 만들기 위해
번역파일이 위와 같이 json의 일반적인 형태로 묶여있으면 intl.formatMessage({ id: ‘meta.title’ })로 불러올 meta 안의 title을 불러올 수 없다.
정 하고 싶다면 json 파일안에서 title을 “meta.title” 이란 이름으로 저장해야함.&lt;/p&gt;
&lt;p&gt;en.json&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;meta.title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Techoi&apos;s Blog&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;meta.description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Read, Inspired and Write.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;meta.keywords&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Technology, Blog, ...&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다양한 컴포넌트에서 번역 문구를 사용하고 관리하기 위해서는 번역 파일도 구조적으로 만들어서 사용하는게 훨씬 수월하기 때문에 이부분은 커스텀해서 고칠 필요가 있다.
react-intl 커뮤니티를 보면 특정 버전 이전에는 가능했었던 기능인데 구조가 변경되면서 사용이 불가능해졌다고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TO-BE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;번역파일을 구조적으로 수정한다.&lt;/p&gt;
&lt;p&gt;en.json&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Techoi&apos;s Blog&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Read, Inspired and Write.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Technology, Blog, ...&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HOC 파일을 일부 수정한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; locale&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; messages&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props
        
        &lt;span class=&quot;token comment&quot;&gt;// intl.formatMessage({id: &apos;watem.jr.option&apos;}) 식으로 요청하기 위한 함수&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flattenMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nestedMessages&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nestedMessages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; value       &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nestedMessages&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prefixedKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefix&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    messages&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prefixedKey&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flattenMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prefixedKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; messages&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; flattedMessages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flattenMessages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IntlProvider locale&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;locale&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; messages&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;flattedMessages&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; initialNow&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;now&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;IntlPage &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;IntlProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러고 나면 intl.formatMessage({ id: ‘meta.title’ }) 라고 불러도 편하게 관리가 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;이정도까지만 커스텀하고는 react-intl 사용하는데 불편함 없이 잘 쓰고 있다.&lt;/h4&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 클라이언트 Error logging 서비스 Sentry.io 적용]]></title><description><![CDATA[클라이언트 사이드에서 발생하는 js Error Tracking, 전쟁의 서막]]></description><link>https://techoi.github.io/posts/sentry-io</link><guid isPermaLink="false">https://techoi.github.io/posts/sentry-io</guid><pubDate>Thu, 27 Jun 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;클라이언트 사이드에서 발생하는 js Error Tracking, 전쟁의 서막…&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;결론만 말하면…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;백엔드의 로그 트래킹, 분석을 ELK(Elasticsearch-Logstash-Kibana), GrayLog 같은 툴로 관리하는 것처럼 프론트엔드도 로그 트래킹 및 분석이 가능하다. 백엔드는 서비스를 제공하는 회사의 서버에서 발생하는 로그를 쌓는 것과 달리 프론트엔드는 클라이언트에서 발생하는 로그를 쌓아야하는데, Unexpected Error 가 발생할때마다 특정 서버에다가 에러 내용을 쏴주도록 만들어서 관리하면 되겠지만, 부분적 유료 서비스 중에 이를 제공해주는 Sentry.io라는 녀석이 있다. 적용하는건 너무 쉽다. Ga같은 마케팅 트래킹 툴을 붙이는 수준이다. 물론 커스텀에 따라 정도가 다르겠지만? 암튼 Sentry.io 붙이기는 아주 간단하지만, 이를 관리하고 쏟아지는 에러를 수정하는 전쟁의 서막이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-27/sentry-io-logo.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;프론트엔드의 약점(?)&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;백엔드와 달리 프론트엔드는 서비스가 클라이언트 사이드에서 돌아가는 경우가 많고, 그렇게에 다양한 사용자 환경에 대한 이슈들이 발생하기 마련이다.&lt;/p&gt;
&lt;p&gt;크로스 브라우징, 모바일 데이터 환경, 모바일 기기별 대응 등…&lt;/p&gt;
&lt;p&gt;가능한 많은 방법과 툴을 활용하여 이에 대응하지만 완벽은 없다.&lt;/p&gt;
&lt;p&gt;결국 프론트엔드도 예상치 못한 버그에 대응을 해야하는데.. &lt;del&gt;사실 내가 안짠 레거시 코드들이 어디서 어떻게 폭주하고 있을지 모르…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;이를 대응하기 위해서 클라이언트 사이드에서 발생하는 js error 들을 트래킹할 수 있는 툴을 알아보다가 Sentry.io를 적용해보기로 했다.&lt;/p&gt;
&lt;p&gt;다양한 선택지가 있겠지만, &lt;a href=&quot;https://alternative.me/sentry&quot;&gt;Sentry.io Alternatives&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;회사에서 적용에 흔쾌히 오케이 해줘서 &lt;del&gt;프론트엔드 리소스가 너무 부족해서 어쩔 수 없..&lt;/del&gt; 바로 적용했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;적용순서&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sentry.io 계정 생성(Team 도 생성하면 다양한 계정을 묶어서 사용가능)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project 생성 (Javascript로 다양한 선택 가능 React도 가능)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Application 따라서 적용하면 끝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바스크립트의 경우 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://browser.sentry-cdn.com/5.4.0/bundle.min.js&quot;&lt;/span&gt; crossorigin&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Sentry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dsn&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://[key]@sentry.io/[key]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 도메인에서만 트래킹 코드가 동작하도록 제한을 둘수도 있고,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트래킹할 조건과 트래킹 인터벌도 정할 수 있고,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slack에 어플리케이션을 추가하여 채널에 알림을 받을 수도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그 결과물이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-27/sentry-io-log.png&quot; alt=&quot;Sentry.io Dash Board&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-27/sentry-io-slack.png&quot; alt=&quot;Slack Bot Alert&quot;&gt;&lt;/p&gt;
&lt;p&gt;실 서비스에 배포한 이후로 폭주하는 에러로그에 크리티컬한 이슈는 바로바로 해소하고 그외에는 Jira 백로그에 쌓고, Ignore하면 동일한 이유의 알럿은 받지 않을 수 있다.&lt;/p&gt;
&lt;p&gt;다행히도 전혀 생각지도 못했던 에러가 발생하지는 않았지만, 사용자들이 겪는 에러를 한눈에 볼 수 있다는 점에서 아주 유용한 툴이다.&lt;/p&gt;
&lt;p&gt;물론 로그 트래픽에 따른 비용이 있긴하지만…ㅎ&lt;/p&gt;
&lt;p&gt;유용한 툴은 비용을 지불하면서도 사용하자는 주의라 만족스럽다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;생각보다 아주 상세한 에러 로그를 확인할 수 있다. 사용자의 기기, ip 는 물론 에러가 발생하는 코드의 위치까지 상세하며, 유사한 로그를 모아보는 기능도 아주 쓸만하다.&lt;/h4&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Next.js 서버사이드 랜더링 배포 환경 이중화 고려사항]]></title><description><![CDATA[AWS ec2 인스턴스에 node server를 여러개 두고 이를 ELB로 연결할 경우 고려해야할 사항]]></description><link>https://techoi.github.io/posts/frontend-server-deploy-setup</link><guid isPermaLink="false">https://techoi.github.io/posts/frontend-server-deploy-setup</guid><pubDate>Wed, 26 Jun 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;AWS ec2 인스턴스에 node server를 여러개 두고 이를 ELB로 연결할 경우 고려해야할 사항&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;결론만 말하면 SSR application을 build할때 build-id를 동일하게 해줘야 ELB를 통해 요청이 인스턴스를 오갈때 문제가 발생하지 않는다.
마찬가지로 무중단 배포를 고려하고 있다면, ELB의 타겟그룹을 바꿔치기하는 식으로 접근해야 할 것이다.
또한, build-id로 인한 404 에러가 날 경우는 url를 다시 한번 호출하는 식의 redirect 코드를 넣어 서비스의 연속성을 유지해야할 것이다.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h3&gt;SPA와 SEO와 SSR&lt;/h3&gt;
&lt;p&gt;일반적인 SPA(Single Page Application)의 경우, 프론트엔드 빌드 파일을 사용자에게 서빙하는데
굳이 노드 서버를 두지 않아도된다.(S3와 cloudfront를 사용해서 서빙하는 경우도 있음)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일반적인 SPA(React, Vue…) 프레임워크를 통해 어플리케이션을 만들 경우, 결과물을 js파일로 번들링해두고, 이를 사용자(client side)의 브라우저가 해석해서 사용자가 볼 수 있도록 한다.&lt;/p&gt;
&lt;p&gt;즉, js 파일을 해석할 수 있는 브라우저를 통해야 사용자가 이를 볼 수 있게 된다.&lt;/p&gt;
&lt;p&gt;웹 어플리케이션을 만들었다면, 이를 더 많은 사용자들이 사용할 수 있도록 서비스를 퍼트리는 작업이 필요하다.
이를 위해 고려하게 되는 것이 SEO(Search Engine Optimization, 검색 최적화)다.&lt;/p&gt;
&lt;p&gt;구글느님같은 경우 search engine 봇(bot)이 알아서 node 파일을 실행해서 페이지를 수집해가 주신다지만
그렇지 않은 몇몇 search engine 봇들은 그렇게 똑똑하지 않다. &lt;del&gt;하려면 할 수 있겠지만 왜 안하는지는 나도 모르겠… 이미 브라우저에서 긁어가는 걸로 충분하단건가..&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;html 와 같은 정적 파일만 읽을줄 아는 봇들이 SPA 어플리케이션의 내용을 읽어가 검색엔진에서 검색되도록 하기 위해서는
우리가 친히 js 파일을 해석해서 정적 파일로 전해드려야 한다.&lt;/p&gt;
&lt;p&gt;이를 위해서 우리는 node 서버를 두고, js 파일을 해석해서 정적 파일 형태로 제공하는 기술 SSR(Server Side Render)를 고려하게 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;SSR의 배포 환경과 무중단 배포&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h5&gt;백엔드의 배포 환경은 구성하기 나름이겠지만 도커를 사용하는 경우와 AWS에서 제공하는 Code Deploy를 사용하는 경우가 거의 대부분을 인 것같다. ~~ 이 두가지만 경험이 있..~~ 프론트엔드의 경우는 pm2를 통해서 인스턴스를 관리하는 것만으로도 충분한 경우가 많겠지만…&lt;/h5&gt;
&lt;p&gt;일반적인 배포환경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker를 사용하는 경우, Rancher나 Docker-Swarm, Kubernetes를 통해 인스턴스들을 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS 인스턴스를 Code Deploy로 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pm2를 사용하여 다중 인스턴스를 관리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서비스를 업데이트하는 과정에서 사용자의 사용성을 최대한 해치지 않기 위해서는 무중단 배포(Continuous Delivery)를 고려해야 한다.
(Blue-Green 배포, Canary 배포… 등의 방법론이 있음)&lt;/p&gt;
&lt;p&gt;당연한 이야기이겠지만, 어떤 방식으로 배포를 하더라도 완전한 무중단 배포는 불가능하지 않을까 싶다. 그럼에도 최대한 안정적으로 서비스를 제공할 수 있는 방식을 추구해야…&lt;/p&gt;
&lt;p&gt;본론으로 돌아가서&lt;/p&gt;
&lt;p&gt;SPA는 js 파일로 어플리케이션을 build하는데 이때, webpack과 같은 번들링 툴들이 알아서 hash 값 등으로 static 파일들의 이름을 정해버린다.(옵션을 통해서 파일이름을 특정 규칙으로 만들어줄 수도 있음)&lt;/p&gt;
&lt;p&gt;만약, ELB로 여러 인스턴스를 묶어놨는데, 각 인스턴스마다 다른 파일 이름을 바라보고 있다면 서버에서 파일을 찾을 수 없다는 404 에러코드를 영접하게 된다.&lt;/p&gt;
&lt;p&gt;이를 해소하는 방법은 간단하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;모든 인스턴스가 같은 build를 바라보면 됨&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker를 사용하는 경우, build 파일을 담고 있는 Volume을 share하면 됨&lt;/li&gt;
&lt;li&gt;Code Deploy로 관리하는 경우, build 파일을 만드는 전용 인스턴스를 하나두고, 이 파일을 s3에 올려서 code deploy가 인스턴스를 생성할때 이 파일을 다운받도록 하면 됨&lt;/li&gt;
&lt;li&gt;pm2의 경우, 어차피 -i 옵션으로 instance들을 여러개 켰다면 하나의 빌드파일을 보고 있을 것이라 고려 불필요일듯(?)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Techoi(테크초이) 메멘토 노트]]></title><description><![CDATA[필요할때마다 구글링하는 것들]]></description><link>https://techoi.github.io/posts/memento</link><guid isPermaLink="false">https://techoi.github.io/posts/memento</guid><pubDate>Tue, 25 Jun 2019 09:32:05 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h5&gt;기억하긴 비효율적이고 때마다 찾기도 좀 그런…&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h3&gt;server&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Mac host file path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;/private/etc/hosts&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;폴더 권한 변경(Recursive 폴더내 파일들까지)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;chmod -R 777 folderName/&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h3&gt;css&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h4&gt;css 인접, 형제, 자손, 자식 선택자&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;X Y : 자손(X가 부모든 부모의 부모든 Y 선택)&lt;/li&gt;
&lt;li&gt;X &gt; Y : 자식(X가 부모일경우에만 Y 선택)&lt;/li&gt;
&lt;li&gt;X + Y : 인접형제(Y의 형제로 앞에 어딘가 X가 있으면 X 선택)&lt;/li&gt;
&lt;li&gt;X ~ Y : 일반형제(Y앞에 X가 있는 경우 Y 선택)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;css padding, margin 순서&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상우하좌&lt;/li&gt;
&lt;li&gt;상하 좌우&lt;/li&gt;
&lt;li&gt;상 좌우 하&lt;/li&gt;
&lt;li&gt;상하는 같고 좌우는 다를때는 각각 써줘야함…&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h3&gt;node&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;h4&gt;pm2 .json에 npm script args 실행&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;waug_react_beta&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;args&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;run -- dev&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;watch&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;start, test 등 npm run 없이 실행가능한 예약어들은 “args”: “start” 만 해도되지만, 예약안된 custom scripts는 &lt;code class=&quot;language-text&quot;&gt;--&lt;/code&gt; 로 args 연결 필요&lt;/p&gt;
&lt;p&gt;To bo continue…&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 기술 스택 - 관심분야]]></title><description><![CDATA[서버사이드 리액트 글로벌 웹서비스 리뉴얼]]></description><link>https://techoi.github.io/posts/what-i-am-interested-in</link><guid isPermaLink="false">https://techoi.github.io/posts/what-i-am-interested-in</guid><pubDate>Fri, 21 Jun 2019 11:01:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;h3&gt;서버사이드 리액트 글로벌 웹서비스 리뉴얼&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 진행한 회사의 신규 프론트엔드 서비스 기술 스택&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-21/react-logo.png&quot;&gt;
&lt;img src=&quot;/images/2019-06-21/next-js-logo.png&quot;&gt;
&lt;img src=&quot;/images/2019-06-21/typescript-logo.png&quot;&gt;
&lt;img src=&quot;/images/2019-06-21/sass-logo.png&quot;&gt;
&lt;img src=&quot;/images/2019-06-21/webpack-logo.jpeg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;테스트 툴로 선정했지만, 계속 쓰게 될지는 모를 Jest…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-21/jest-logo.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;서비스 전반적으로 적용은 힘들겠지만, 그래도 어느정도 조금씩 녹여보고 싶은 기술&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-21/serverless-logo.png&quot;&gt;
&lt;img src=&quot;/images/2019-06-21/graphql-logo.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;관심있던 기술을 둘러보고 이것저것 접하기 위해서는 역시 일에다가 적용하는 거지~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;완전 새로운 기술은 아니지만, 어느정도 안정성을 인정받은 ** Trady ** 한 기술들이기에..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;프론트엔드 개발자가 혼자라서…&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;조금 외롭기하나,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;정식 문서와 친구먹고, 프론트엔드 커뮤니티에 속할 이유가 되고,
새로운 프로젝트의 기술 스택 선택에 자유도가 있어서 좋다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;다른 프론트엔드 개발자와의 소통은 &lt;strong&gt;오픈소스&lt;/strong&gt; 활동을 통해서 커버업할 수 있길…&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Git key 생성 및 계정 설정 분리하기]]></title><description><![CDATA[나만의 깃 세팅 구성하기]]></description><link>https://techoi.github.io/posts/seperate-git-user-with-key</link><guid isPermaLink="false">https://techoi.github.io/posts/seperate-git-user-with-key</guid><pubDate>Wed, 19 Jun 2019 20:53:56 GMT</pubDate><content:encoded>&lt;h3&gt;나만의 깃 세팅 구성하기&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;블로그를 작성할 시간을 내는게 정말 쉽지 않다. 그래도 자주 써보자는 생각이 다시 들게 해준 상황 덕분에 정리한다&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;본론으로 바로 들어간다.&lt;/p&gt;
&lt;p&gt;이슈는 다음과 같다.&lt;/p&gt;
&lt;h3&gt;특정 폴더에서만 특정한 git user와 ssh키를 사용하고 싶다.&lt;/h3&gt;
&lt;p&gt;회사 업무와 개인 프로젝트를 하나의 맥북으로 하고 있기 때문에 필요하다…
&lt;del&gt;회사에서 맥북을 안사줘서 개인 맥북을 사용해야하는ㅠㅠ 눙물이 난다.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TODO LIST&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;계정별 ssh 키 생성&lt;/li&gt;
&lt;li&gt;특정 폴더를 위한 &lt;code class=&quot;language-text&quot;&gt;.gitconfig&lt;/code&gt; 파일 생성&lt;/li&gt;
&lt;li&gt;특정 폴더에서만 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;에서 설정한 config 파일을 사용하도록 설정&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;1. 계정별 ssh 키 생성&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;아무 설정도 애초에 없었다고 가정하고 간다. 만약 특정 설정이 있었다면 지우고 하면 됨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ cd ~/.ssh
  $ ssh-keygen -t rsa -C &amp;quot;username@github.com&amp;quot; // 계정 이름
  $ Enter file in ....
  /* SSH 키 이름 설정 편의상 username@github.com으로 생성 추천*/

  $ ls // 파일 생성 여부 확인&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 방식을 반복해서 계정마다 키를 생성한다.&lt;/p&gt;
&lt;p&gt;생성한 키는 에이젠트에 추가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ ssh-add ~/.ssh/username@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SSH 키 관리는 &lt;code class=&quot;language-text&quot;&gt;~/.ssh/config&lt;/code&gt; 파일에서&lt;/p&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&quot;%22https://blog.outsider.ne.kr/1448%22&quot;&gt;Outsider님의 블로그&lt;/a&gt; 에 잘 정리되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh를 새로 만들었으니깐, 전역으로 사용할 user 정보를 가질 계정 설정도 추가로  해주면 됨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. 특정 폴더를 위한 &lt;code class=&quot;language-text&quot;&gt;.gitconfig&lt;/code&gt; 파일 생성&lt;/h2&gt;
&lt;p&gt;이것도 Outsider님의 블로그에 잘 정리되어 있지만…&lt;/p&gt;
&lt;p&gt;개념만 말하면, 특정 폴더(아마도 회사의 workplace)에서만 사용될 &lt;code class=&quot;language-text&quot;&gt;.gitconfig&lt;/code&gt;파일을 만드는 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;.gitconfig-work&quot;&gt;&lt;pre class=&quot;language-.gitconfig-work&quot;&gt;&lt;code class=&quot;language-.gitconfig-work&quot;&gt;[user]
  email = username@company.com
  name = techoi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. 특정 폴더에서만 특정한 &lt;code class=&quot;language-text&quot;&gt;.gitconfig&lt;/code&gt; 파일 사용하도록 설정&lt;/h2&gt;
&lt;p&gt;위에서 만든 &lt;code class=&quot;language-text&quot;&gt;.gitconfig-work&lt;/code&gt; 파일도 ~/위치에 있고 여기에는 .gitconfig 파일도 있다.&lt;/p&gt;
&lt;p&gt;.gitconfig 파일에 다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;.gitconfig&quot;&gt;&lt;pre class=&quot;language-.gitconfig&quot;&gt;&lt;code class=&quot;language-.gitconfig&quot;&gt;[includeIf &amp;quot;gitdir:~/company-workspace]
  path = .gitconfig-work&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만 넣어주면 된다.&lt;/p&gt;
&lt;p&gt;이제 잘됬는지 확인해보자!&lt;/p&gt;
&lt;p&gt;company-workspace 외 폴더에 있는 프로젝트에 가서
&lt;code class=&quot;language-text&quot;&gt;git config --list&lt;/code&gt;를 쳐보면 내 계정의 정보면 보인다.&lt;/p&gt;
&lt;p&gt;company-workspace에 있는 특정 프로젝트에 가서
&lt;code class=&quot;language-text&quot;&gt;git config --list&lt;/code&gt;를 쳐보면 회사에서 쓸 계정이 보인다.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;h3&gt;추가사항&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;ssh를 만들었다고해서 다 끝나는건 아니다.
ssh 생성했으면 ~/.ssh 폴더 안에 &lt;code class=&quot;language-text&quot;&gt;private key&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;public key&lt;/code&gt;가 생성된다.&lt;/p&gt;
&lt;p&gt;이를 github의 경우, [Setting] &gt; [SSH and GPG keys] &gt; [New SSH key]
에서 생성한 public key를 복사해서 넣어주면 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;이것도 귀찮으면&lt;/h4&gt;
&lt;p&gt;애초에 ssh를 따로 만들지도 말고, 그냥 git 로컬 repo에 입력한 &lt;code class=&quot;language-text&quot;&gt;username&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;password&lt;/code&gt;를 저장할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config credential.helper store&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;끗&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;에필로그&lt;/h3&gt;
&lt;p&gt;예전부터 Vim을 잘 쓰고 싶다는 생각만 하다가 일단 시작해보자하는 마음에 기존에 사용하고 있던 IDE에 Vim extension을 추가해버렸다. 그리고 한 2주 버벅이면서 되돌리고 싶다 계속 생각했지만, 오기로 버티다 보니깐 꽤나 손에 익게 되었다. 그후로는 server 작업이든, 기타 mac 설정 작업을 할때 vi을 쓸때 속이 시원해지는 마법이 내게도 생겼다. 아쉬운점은 IDE마다 Vim extension의 기능 차이가 있다는… 혹시나 Vim에 익숙해지고 싶다면 extension 설치를 적극 추천한다. 물론 한동안 manual을 계속 보게 되겠지만…&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[기분 좋게 IE 이슈를 해소하는 방법]]></title><description><![CDATA[리액트 훅스로 IE에서 발생하는 overflow scroll 이슈 해소]]></description><link>https://techoi.github.io/posts/ie-style-issue-solve-with-react-hooks</link><guid isPermaLink="false">https://techoi.github.io/posts/ie-style-issue-solve-with-react-hooks</guid><pubDate>Tue, 18 Jun 2019 20:53:56 GMT</pubDate><content:encoded>&lt;h3&gt;리액트 훅스로 IE에서 발생하는 overflow scroll 이슈 해소&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;블로그를 작성할 시간을 내는게 정말 쉽지 않다. 그래도 자주 써보자는 생각이 다시 들게 해준 상황 덕분에 정리한다&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;본론으로 바로 들어간다.&lt;/p&gt;
&lt;p&gt;이슈는 다음과 같다.
Chrome 류에서는 max-height만 가지고 overflow를 쉽게 관리할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-18/popup-layout.png&quot; alt=&quot;모달 레이아웃&quot;&gt;&lt;/p&gt;
&lt;p&gt;위의 형태의 레이아웃을 만들기 위해서 Chrome류에서는
부모 component에  max-height를 주고,
스크롤을 붙이고 싶은 component에 height와 overflow: auto;를 주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 70%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 85%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 한국에서 웹서비스를 운영하고 있다면 어김없기 고려해야하는 IE라는 큰 산이 있다.&lt;/p&gt;
&lt;p&gt;각종 polyfill로 해소할 수 있는 부분은 해소했다 손 치더라도..
스타일링을 돕는 다양한 속성들이 IE에서는 예상과 다르게 보여질때가 있기에…
&lt;del&gt;IE 지원안하고싶…&lt;/del&gt; 이를 대응해줄 필요가 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;위 스타일을 적용하면 IE에서는 부모 component에 스크롤이 붙어버린다.
그럼 고정하고 싶은 header와 footer가 고정되지 못한다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이를 해결하는 다양한 방식이 있다.&lt;/p&gt;
&lt;p&gt;가장 간단한 방식은 아마도&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;부모의 사이즈를 고정해버리는 것!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 700px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;딱 봐도 알겠지만, 명료하지만 다양한 경우를 다 담을 수 없다.&lt;/p&gt;
&lt;p&gt;리액트 컴포넌트의 재사용성을 고려하기 위해 다른 방법을 생각해보다가&lt;/p&gt;
&lt;h2&gt;React Hooks 를 활용해보기로 했다.&lt;/h2&gt;
&lt;p&gt;모달 컴포넌트 자체가 애초에 function component였기에  &lt;del&gt;최근 리액트 공식 문서를 다시 읽었기에…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;요즘은 핫하기도 하지만 어느정도 안정적으로 판단되는 기술들을 새로운 프로젝트에 녹여내는걸로 바쁜 일정에 대한 자기 위안을 삼고 있다(지금 진행하고 있는 신규 프로젝트에는 React, Next.js(SSR), React Hooks, Sass, Type Script, Jest가 기본 골조)&lt;/p&gt;
&lt;p&gt;모달 컴포넌트는 담기는 내용이 통신 결과에 따라 변경되는 구조이기에 빅 사이즈 경우와 작은 사이즈 경우가 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-18/big-size-popup.png&quot; alt=&quot;빅 사이즈 모달&quot;&gt;
&lt;img src=&quot;/images/2019-06-18/small-size-popup.png&quot; alt=&quot;스몰 사이즈 모달&quot;&gt;&lt;/p&gt;
&lt;p&gt;목표는 부모 component의 height를 자식(스크롤을 달고 싶은) component의 height에 따라 동적으로 설정하는 것!&lt;/p&gt;
&lt;p&gt;자식의 사이즈는 동적으로 결정되므로, 컴포넌트가 그려진 다음에 사이즈를 확인해서 부모의 스타일을 바꿔줘야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;자식까지 일단 다 그려진다.&lt;/li&gt;
&lt;li&gt;자식의 사이즈를 확인한다.&lt;/li&gt;
&lt;li&gt;자식의 사이즈에 따라 부모의 사이즈를 수정한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;리액트 클래스 컴포넌트를 사용하고 있다면 componentDidMount() life cycle에서 자식의 사이즈를 통해 부모의 사이즈를 바꿔주면 될테고,
바닐라 JS를 사용하고 있다면, JQuery로 load된 후 해당 작업을 하면 될테다.&lt;/p&gt;
&lt;p&gt;리액트 펑션 컴포넌트를 사용하고 있었다면, 라이프 사이클을 사용하기 위해서 클래스 컴포넌트로 바꾸지말고,
리액트 훅스를 사용해주자!&lt;/p&gt;
&lt;h2&gt;React Hooks로 작업한 코드는 다음과 같다.&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* tsx 파일 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; CheckCategory&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SFC&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; = () =&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; popupBox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createRef&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;HTMLDivElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;();
    let popupWrapper = React.createRef&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;HTMLDivElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;();

    useEffect(() =&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;popupWrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;// popupWrapper.current.style.height = popupBox.current &amp;amp;&amp;amp; popupBox.current.clientHeight + 120 + &apos;px&apos;; // 코드 수정&lt;/span&gt;
          popupWrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; popupBox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; popupBox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; popupBox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;);

    return (
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          ...
            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;parent&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;popupWrapper&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                ...
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; popupBox &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
                    ...
                &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&quot;color:#ffa8df&quot; &gt; &lt;strong&gt;코드 수정&lt;/strong&gt;&lt;/span&gt; : clientHeight의 경우 checkbox 요소의 checked 여부에 따라 들쑥날쑥한 현상이 발생
&lt;code class=&quot;language-text&quot;&gt;clientHeight&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;style.height&lt;/code&gt;로 변경&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* scss 파일 */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.parent &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 70%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.content &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;respond-to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* 요건 반응형 대응 코드(sass를 사용하고 있다는?)*/&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1150px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 85%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;useEffect를 사용해서 render하는 타이밍마다
자식의 사이즈를 통해 부모의 height를 동적으로 줄 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;사실 이 코드도 보면 고정값으로 120 을 더하고 있는 부분이 있는데, 이는 모달 컴포넌트의 header와 footer의 고정적인 높이의 합이므로 예외로 하자&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;최적의 코드라는 생각은 아니지만, IE를 대응해야하는 &lt;del&gt;조금은 귀찮은&lt;/del&gt; 상황에서 스스로를 위안할 수 있는 접근을 찾다보니…&lt;/p&gt;</content:encoded></item><item><title><![CDATA[첫 시작치고 괜찮다!]]></title><description><![CDATA[Gatsby로 새로운 블로그를 시작했다. github.io]]></description><link>https://techoi.github.io/posts/the-beginning</link><guid isPermaLink="false">https://techoi.github.io/posts/the-beginning</guid><pubDate>Fri, 15 Feb 2019 09:53:56 GMT</pubDate><content:encoded>&lt;h3&gt;굳이 블로그를 만들기까지 해야할까 싶었지만…&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;크게 3가지 이유로 인해 작업을 시작했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;markdown에 익숙해지고 싶다.&lt;/li&gt;
&lt;li&gt;자유도가 높은 환경에서 해보고 싶다.&lt;/li&gt;
&lt;li&gt;github.io를 써보고 싶다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;여러가지 선택지들이 있었지만, &lt;code class=&quot;language-text&quot;&gt;jekyll&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;hexo&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;gatsby&lt;/code&gt; 정도를 후보군에 두고 고민하다가… &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(결국에는 gatsby로 선택 뭔가 헤어 왁스 느낌이 나는 이름이지만)&lt;/p&gt;
&lt;p&gt;기존에 개인용 저장소처럼 사용하던 Evernote와 tistory와는 어떤 차별성을 줘야 할 지 고민되지만 일단 나눠서 가는 쪽으로 생각하고 있다.&lt;/p&gt;
&lt;p&gt;아마도 github.io는 public한 내용이 올라가게 될 것같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gatsby&lt;/strong&gt;는 &lt;em&gt;React&lt;/em&gt;와 &lt;em&gt;graphQL&lt;/em&gt;을 사용하고 있기에 커스텀하면서 자연스레 공부하는 꼴이 될 듯?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;얼마전에 본 &lt;a href=&quot;%22https://www.youtube.com/watch?v=QyxES-SUq_E%22&quot;&gt;2019년 반드시 알아야하는 웹 개발 트렌드 5가지&lt;/a&gt;에서도 언급된 기술 중 2개나 가져가는 트렌디함 이란(사실 serverless 말고는 2018년에도 반드시 알아야할 웹개발 트렌드였을듯…?)&lt;/p&gt;</content:encoded></item></channel></rss>