{"data":{"site":{"siteMetadata":{"author":{"name":"Jimmy Choi (techoi)","contacts":{"twitter":"#"}},"disqusShortname":"techoi-blog","subtitle":"As long as we dare to dream and do not get in the way of ourseleves, anything is possible","title":"Read, Inspired and Write.","url":"https://techoi.github.io"}},"markdownRemark":{"id":"534395ea-759a-5cd1-9bb7-03214fa2eac4","html":"<blockquote>\n<h5>React를 사용한다면 po, mo 파일들과의 결별을 선언하고 새로운 인연을 찾자..</h5>\n</blockquote>\n<hr>\n<blockquote>\n<p>결론만 말하면…</p>\n</blockquote>\n<p>리액트로 새로운 프로젝트를 구성한다면, 다중언어를 제공하기 위해 일반적으로 사용하는 po, mo 파일들을 관리하지 않아도된다. json형태로 언어별 번역 문구를 관리할 수 있는 react-intl를 적용하면, 그간 번역 파일 관리하면서 아팠던 두통을 훌훌 털어버릴 수 있다. Server Side Render(SSR) 프레임워크인 Next.js에서 적용한 사례를 통해 react-intl의 장점만 알아보자 <del>단점도 있겠지만 레거시의 php에서 번역파일 수정하고 apache reload 하던 것과 비교할소냐…</del></p>\n<hr>\n<p><img src=\"/images/2019-06-28/react-intl-comparision.png\"></p>\n<blockquote>\n<p>여러 Alternatives 중에 월등한 사용률과 안정성도 어느정도 인정받은 모듈이라 볼 수 있음</p>\n</blockquote>\n<p>npm 모듈을 정할때는 일단 사용자 수, 깃이라면 이슈관리, 의존성 등을 확인하고 현재 사용하고 있는 구조에 적절하게 묻어날 수 있으면 붙이는 식으로 결정하곤 한다.</p>\n<p>주어진 상황마다 조금씩 설정 방식이 다르겠지만,\n일반적인 리액트 환경이라면 <a href=\"https://gracefullight.dev/2018/01/15/react-intl%EB%A1%9C-%EB%B2%88%EC%97%AD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-react-i18n/\">react-intl로 번역 적용하기</a> 링크를 참조하면 좋을 듯</p>\n<p>위 블로그에서는</p>\n<ol>\n<li>react-intl 설치</li>\n<li>번역 데이터 생성</li>\n<li>연동</li>\n<li>사용</li>\n</ol>\n<p>순으로 설명을 잘해놨지만</p>\n<p>Next.js 에서의 설정 방식과 좀 더 나은 번역데이터 활용을 위한 몇가지 팁을 덧붙이자면 다음과 같다.</p>\n<hr>\n<blockquote>\n<h4>Next.js React-intl 적용하기</h4>\n</blockquote>\n<ol>\n<li>\n<p>Next.js 프로젝트 생성(이미 되있다고 가정)</p>\n</li>\n<li>\n<p><a href=\"https://github.com/soulmachine/nextjs-starter-kit#step4-react-intl\">Next.js react-intl 세팅</a> 따라하기</p>\n<ul>\n<li>패키지 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  $ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> react-intl intl accepts glob</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">server.js</code> 에 accept Language에 따라서 번역파일 읽도록 설정</p>\n</li>\n<li>\n<p><code class=\"language-text\">_document.js</code> 에 모든 페이지에 localeDataScript 주입해주도록 설정</p>\n</li>\n<li>\n<p>HOC 만들기 IntlProvider로 component 감싸기(Hooks를 이용해서 HOC를 대체할 수도 있음)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>실제 사용 방법</p>\n<ul>\n<li>./lang 폴더에 en.json, ko.json, ja.json 등 accept Language에 맞춰 번역 파일들을 넣어둔다. </li>\n<li>각 컴포넌트를 Hoc로 감싸서 export 해주면 사용이 가능함</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An example app integrating React Intl with Next.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"greeting\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Component 자체로 번역 문구를 사용하고 싶을때: FormattedMessage 컴포넌트에 id를 주면 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FormattedMessage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-intl'</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FormattedMessage</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>컴포넌트가 아니라 그냥 문구만 사용하고 싶을때: props로 intl 객체를 받아서 사용하면 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> injectIntl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-intl'</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoinForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> intl <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">placeholder</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n              intl<span class=\"token punctuation\">.</span><span class=\"token function\">formatMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                id<span class=\"token punctuation\">:</span> <span class=\"token string\">'greeting'</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">injectIntl</span><span class=\"token punctuation\">(</span>JoinForm<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"4\">\n<li>\n<p>꿀팁(번역파일 관리와 id를 통한 호출을 직관적으로 바꾸기)</p>\n<ul>\n<li>AS-IS</li>\n</ul>\n<p>en.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"meta\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Techoi's Blog\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Read, Inspired and Write.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Technology, Blog, ...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>번역문구는 페이지별로 각각 다르기 마련이고, 그렇게 되면 id를 특정하는데 굉장히 피곤해진다. 번역 파일을 정갈하게 만들기 위해\n번역파일이 위와 같이 json의 일반적인 형태로 묶여있으면 intl.formatMessage({ id: ‘meta.title’ })로 불러올 meta 안의 title을 불러올 수 없다.\n정 하고 싶다면 json 파일안에서 title을 “meta.title” 이란 이름으로 저장해야함.</p>\n<p>en.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"meta.title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Techoi's Blog\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"meta.description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Read, Inspired and Write.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"meta.keywords\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Technology, Blog, ...\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>다양한 컴포넌트에서 번역 문구를 사용하고 관리하기 위해서는 번역 파일도 구조적으로 만들어서 사용하는게 훨씬 수월하기 때문에 이부분은 커스텀해서 고칠 필요가 있다.\nreact-intl 커뮤니티를 보면 특정 버전 이전에는 가능했었던 기능인데 구조가 변경되면서 사용이 불가능해졌다고 한다.</p>\n<ul>\n<li>TO-BE</li>\n</ul>\n<p>번역파일을 구조적으로 수정한다.</p>\n<p>en.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"meta\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Techoi's Blog\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Read, Inspired and Write.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Technology, Blog, ...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>HOC 파일을 일부 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> locale<span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n        \n        <span class=\"token comment\">// intl.formatMessage({id: 'watem.jr.option'}) 식으로 요청하기 위한 함수</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">flattenMessages</span><span class=\"token punctuation\">(</span>nestedMessages<span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nestedMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> value       <span class=\"token operator\">=</span> nestedMessages<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> prefixedKey <span class=\"token operator\">=</span> prefix <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">;</span>\n        \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    messages<span class=\"token punctuation\">[</span>prefixedKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">,</span> <span class=\"token function\">flattenMessages</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> prefixedKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        \n                <span class=\"token keyword\">return</span> messages<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">let</span> flattedMessages <span class=\"token operator\">=</span> <span class=\"token function\">flattenMessages</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>IntlProvider locale<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>locale<span class=\"token punctuation\">}</span> messages<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>flattedMessages<span class=\"token punctuation\">}</span> initialNow<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>now<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>IntlPage <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>IntlProvider<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러고 나면 intl.formatMessage({ id: ‘meta.title’ }) 라고 불러도 편하게 관리가 가능하다.</p>\n</li>\n</ol>\n<p>끗</p>\n<blockquote>\n<h4>이정도까지만 커스텀하고는 react-intl 사용하는데 불편함 없이 잘 쓰고 있다.</h4>\n</blockquote>","fields":{"tagSlugs":["/tag/react/","/tag/react-intl/","/tag/global/","/tag/npm/","/tag/languages/"]},"frontmatter":{"date":"2019-06-28T09:32:05.962Z","description":"po, mo 파일들과 헤어지는 가장 쿨한 방법","tags":["React","React-intl","Global","npm","Languages"],"title":"리액트 다중언어 제공 라이브러리 react-intl 적용"}}},"pageContext":{"slug":"/posts/react-intl"}}