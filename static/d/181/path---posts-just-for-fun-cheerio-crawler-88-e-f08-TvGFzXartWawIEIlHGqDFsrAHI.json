{"data":{"site":{"siteMetadata":{"author":{"name":"Jimmy Choi (techoi)","contacts":{"twitter":"#"}},"disqusShortname":"techoi-blog","subtitle":"As long as we dare to dream and do not get in the way of ourseleves, anything is possible","title":"Read, Inspired and Write.","url":"https://techoi.github.io"}},"markdownRemark":{"id":"1bde14e0-91a7-5594-8bed-967b8d2ca418","html":"<blockquote>\n<h5>주말에 그동안 못본 웹툰 정주행하다가 시작한 크롤링 스크래핑 하면서 놀기…</h5>\n</blockquote>\n<hr>\n<blockquote>\n<p>결론만 말하면…</p>\n</blockquote>\n<p>자바의 Jsoup, 파이썬의 Beautiful Soup으로 하던 스크래핑을 자바스크립트로 하는 건데, Cheerio라는 라이브러리를 가지고 놀아보는 뭐 그런 글이다.</p>\n<hr>\n<p><img src=\"/images/2019-06-30/naver-webtoon-logo.png\"></p>\n<blockquote>\n<p>네XX 요일 웹툰을 거의 다 챙겨보던 때가 있었다.</p>\n</blockquote>\n<p>특정 요일에는 챙겨보던 웹툰이 1~9위를 다 하고 있었던 시기도 있었다.\n어렸을때부터 만화를 좋아했었는데, 웹툰 퀄리티가 말도 안되게 솟구치면서 많은 사람들이 <del>쿠키를 구워가며</del> 웹툰을 즐기고 있다.</p>\n<p>가끔 정신없이 바쁜 기간에는 웹툰을 못보고 몰아보기를 하게 되는데, 그럴때 다X웹툰의 정주행 기능이 네XX웹툰에도 있으면 좋겠다라는 생각은 했었는데…</p>\n<p>주말에 못본 웹툰이나 볼까하다가 귀찮아서, 정주행 기능이나 만들어볼까 하다가 웹툰 소장툴을 만들어 봤다.</p>\n<p>(은행사, 카드사, 배달앱 3사 스크래핑 모듈을 만들어대던 시기에는 생각의 흐름대로 술술했던 스크래핑 기술을 되새겨 볼 겸사겸사 오랜만에 스크래핑 모듈이나 만들어보자 하고 움직였는데, 이미지 링크 모아서 한번에 다운받는 뭐 그런 간단한 기능이지만, Referer 설정만 해주면 별 문제 없이 잘 해소됬다. 너무 쉽게 끝나버려서 Cheer.io 사용법이나 간단하게 설명하는데 그칠 듯하다.)</p>\n<blockquote>\n<p><strong>웹툰의 저작권은 작가분들께 있습니다.</strong></p>\n</blockquote>\n<p>지적 재산에 대한 존중이 개발자로서의 기본 소양이 아닐까 싶다!</p>\n<h4>네XX 웹툰 소장툴 기본 프로세스</h4>\n<ol>\n<li>네XX 웹툰 검색에서 원하는 웹툰을 검색한다.</li>\n<li>해당 웹툰이 존재 한다면, 최신 회차의 번호를 확인한다.</li>\n<li>첫회부터 마지막 회차까지 모든 페이지에 들어가서 웹툰 이미지를 다운로드 한다.(회차별로 파일 순서대로)</li>\n<li>(불필요) 네XX 웹툰은 이미지를 임의로 잘라놓았으니 그 이미지들을 모아서 하나의 긴 이미지로 만들어준다.</li>\n</ol>\n<h4>스크래핑 툴</h4>\n<ol>\n<li>Fiddler mac인 경우, Charles</li>\n<li>Wire Shark</li>\n<li>그리고 Chrome or Firefox</li>\n<li>추가로 Postman</li>\n</ol>\n<h4>일반적인 스크래핑 방식에 대해 간단하게 설명하면,</h4>\n<p>내가 이해하는 웹 스크래핑(크롤링은 스크래핑의 한 방식) 웹 상의 정보를 수집해서 원하는 형태로 가공하는 것이다.\n이를 사람이 하는게 아니라 bot / module을 써서 하도록 하는 것이기에, 웹 브라우징을 하는 과정을 코드로 작업해주면 된다.</p>\n<p>누구든 접속해서 정보를 열람할 수 있는 웹사이트라 하더라도 마구잡이로 접속이 가능하지 않을 수 있다.\n만약 로그인을 통해서 접속해야만 하는 사이트라면 로그인을 하는 기능을 구현해줘야할 것이고,\n특정 ip만 접속을 허용한다면 특정 ip에서 왔다라는 표식을 넣어주면 될 것이다.</p>\n<p>즉, 정보를 수집하고 싶은 타겟 페이지의 구조를 파악하고 거기에서 필요한 정보들만 수집해내서 원하는 형태로 가공하면 됨\n여기서는 네XX웹툰의 검색페이지, 목록페이지, 회차별 페이지가 타켓이고 각 페이지마다 원하는 정보는 다음과 같다.</p>\n<p>검색 페이지 : 검색어에 해당하는 웹툰 목록 페이지 링크\n목록 페이지 : 최신 회차 정보 및 웹툰 회차 페이지 링크\n회차별 페이지 : 웹툰 이미지 링크</p>\n<p>일단 브라우저로 한번 둘러보시라~</p>\n<p>전체 코드는 <a href=\"https://github.com/techoi/n-webtoon-scraping\">github</a>에서 확인 가능하다.</p>\n<ol>\n<li>\n<p>검색어로 조회</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// node index.js 신의탑 식으로 arg로 검색어를 입력하도록 함</span>\n<span class=\"token keyword\">let</span> webtoonName <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>검색결과의 첫번째 a 태그의 href 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webtoonHref <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#content > div:nth-child(2) > ul > li:nth-child(1) > h5 > a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> webtoonUrl <span class=\"token operator\">=</span> naverWebtoonDomain <span class=\"token operator\">+</span> webtoonHref<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>2에서 추출한 url로 접속해서 최신 회차의 페이지 번호 및 회차별 페이지 url 추출</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> lastNoUrl <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#content > table > tbody > tr:nth-child(2) > td.title > a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> lastNo <span class=\"token operator\">=</span> lastNoUrl<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^0-9]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>1회부터 최신 회차 페이지 각각 들어가서 웹툰 이미지 저장(동시 접속해서 이미지들을 긁으면 이미지 서버가 막으므로 동기로 요청)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  webtoonUrl <span class=\"token operator\">=</span> webtoonUrl<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list.nhn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'detail.nhn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>lastNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">saveImagesByChapter</span><span class=\"token punctuation\">(</span>webtoonUrl<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`chapter: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Done`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>\n<p>주석처리된 부분을 보면 회차의 이미지를 배열로 받아서 세로로 머지하는 기능이 있는데, 파일 용량만 커지고 별로인듯, 차라리 웹툰을 읽을 수 있는 페이지를 따로 만들어서 정주행 기능을 만들어주는게 훨씬 나을듯</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">mergeImg</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> direction<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>끗</p>\n<blockquote>\n<h4>또 욕구뿜뿜이 일어나면 다른 웹툰들도 스크래핑 모듈을 만들어보고 정리해 올려봐야겠다.</h4>\n</blockquote>","fields":{"tagSlugs":["/tag/crawler/","/tag/cheer-io/","/tag/webtoon/","/tag/web-scraping/","/tag/just-for-fun/"]},"frontmatter":{"date":"2019-06-30T09:32:05.962Z","description":"그동안 못본 웹툰 몰아보다 시작한 크롤링 스크래핑 하면서 놀기","tags":["Crawler","Cheer.io","Webtoon","Web scraping","Just for fun"],"title":"[심심풀이] 크롤링 라이브러리 Cheerio 가지고 놀기"}}},"pageContext":{"slug":"/posts/just-for-fun-cheerio-crawler"}}